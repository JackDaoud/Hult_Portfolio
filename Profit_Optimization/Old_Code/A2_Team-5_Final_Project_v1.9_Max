{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-26T00:01:18.103553Z",
     "start_time": "2021-03-26T00:01:18.096395Z"
    }
   },
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "<br><br><br><br><br>\n",
    "<u><b><font size = 6>A2: Team Project OJ </f></b></u><br><br>\n",
    "<b><font size = 5> Data Optimization - DAT-5304 </f></b>\n",
    "<br><br>\n",
    "<b>Authors</b>          : Carolina Novello Moreira, Jack Daoud & Max Lembke <br>\n",
    "<b>Date Created</b> : 03/24/2021<br>\n",
    "<br><br><br><br><br>\n",
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "<br>\n",
    "\n",
    "\n",
    "<b><font size = 5> Instructions </f></b>\n",
    "\n",
    "This option involves using one of the two real-world datasets that I posted on Canvas. These datasets have information on Unit Sales, Prices, and Gross Margins for several SKU’s (Stock Keeping Units). The OJ Data is from Dominik’s Grocery Store in Chicago. The Milk Dataset is from Peru. Both have weekly data for multiple years. Using this data, you should advise management as to what they should do. Your advice could include marketing strategies (feature and display in OJ Dataset or Loyalty Card usage in Milk Dataset). Some suggestions or ideas are to: \n",
    "\n",
    "1.\tEstimate Quantity Demanded as a function of price (and similar prices) using a Log Transformation. You can also include marketing strategies in your regression.\n",
    "2.\tCombine Gross Margin information to advise the firm on maximizing profits. To avoid sales cannibalization, simultaneously include multiple products. Depending on how you set this up, you might be able to use Solver in Excel to fin the optimal strategy. It is a NLP.\n",
    "3.\tThe estimates of margins and demand are only estimates. Perform Monte Carlo analysis to simulate different strategies even if your estimate is not perfect (draw the regression coefficients from a normal with mean = estimate and standard deviation = standard error). Report on the results from these simulations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Set-up "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-27T20:01:47.021652Z",
     "start_time": "2021-03-27T20:01:46.076150Z"
    }
   },
   "outputs": [],
   "source": [
    "# import packages \n",
    "import pandas as pd #pandas \n",
    "import numpy  as np #numpy \n",
    "from numpy import arange # for ranges with floats\n",
    "import statsmodels.formula.api as smf # predictive modeling with nice outputs\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# set options \n",
    "pd.set_option(\"display.max_rows\", 999)\n",
    "pd.set_option(\"display.max_columns\", 50)\n",
    "\n",
    "# importing file \n",
    "df = pd.read_excel('OJ_Data.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-27T20:01:47.028560Z",
     "start_time": "2021-03-27T20:01:47.023410Z"
    },
    "code_folding": []
   },
   "outputs": [],
   "source": [
    "# Helper functions \n",
    "\n",
    "# Make binary function \n",
    "def make_binary(df):\n",
    "    \n",
    "    for col in df.columns:\n",
    "        \n",
    "        if 'feat' in col \\\n",
    "        or 'disp' in col:\n",
    "            \n",
    "            for index, value in df.iterrows():\n",
    "                \n",
    "                if df.loc[index, col] >= 0.5:\n",
    "                    df.loc[index, col] = 1\n",
    "                else:\n",
    "                    df.loc[index, col] = 0\n",
    "        \n",
    "            df[col] = df[col].astype(int)\n",
    "\n",
    "\n",
    "# Shuffle dataframe function\n",
    "def shuffle(df, n = 1, axis = 0):     \n",
    "    df = df.copy()\n",
    "    for _ in range(n):\n",
    "        df.apply(np.random.shuffle, axis = axis)\n",
    "        return df\n",
    "\n",
    "# Source:\n",
    "# https://stackoverflow.com/questions/15772009/shuffling-permutating-a-dataframe-in-pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-27T20:01:47.860324Z",
     "start_time": "2021-03-27T20:01:47.030128Z"
    }
   },
   "outputs": [],
   "source": [
    "# Data cleaning \n",
    "\n",
    "# Clean binary variables\n",
    "make_binary(df)\n",
    "\n",
    "\n",
    "# Log transformations \n",
    "\n",
    "# price\n",
    "df['log_price1'] = np.log10(df['price1'])\n",
    "df['log_price2'] = np.log10(df['price2'])\n",
    "df['log_price3'] = np.log10(df['price3'])\n",
    "df['log_price4'] = np.log10(df['price4'])\n",
    "df['log_price5'] = np.log10(df['price5'])\n",
    "\n",
    "# sales\n",
    "df['log_sales1'] = np.log10(df['sales1'])\n",
    "df['log_sales2'] = np.log10(df['sales2'])\n",
    "df['log_sales3'] = np.log10(df['sales3'])\n",
    "df['log_sales4'] = np.log10(df['sales4'])\n",
    "df['log_sales5'] = np.log10(df['sales5'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part 1: Regression "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Product 1: Tropicana Premium 64 oz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-27T20:01:47.887794Z",
     "start_time": "2021-03-27T20:01:47.861935Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:             log_sales1   R-squared:                       0.794\n",
      "Model:                            OLS   Adj. R-squared:                  0.781\n",
      "Method:                 Least Squares   F-statistic:                     59.46\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):           3.56e-34\n",
      "Time:                        16:01:47   Log-Likelihood:                 57.156\n",
      "No. Observations:                 116   AIC:                            -98.31\n",
      "Df Residuals:                     108   BIC:                            -76.28\n",
      "Df Model:                           7                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept      1.4345      0.482      2.977      0.004       0.479       2.390\n",
      "log_price1    -2.6540      0.232    -11.432      0.000      -3.114      -2.194\n",
      "log_price2     0.1441      0.317      0.455      0.650      -0.483       0.772\n",
      "log_price3     0.5562      0.185      3.008      0.003       0.190       0.923\n",
      "log_price4    -0.0630      0.202     -0.311      0.756      -0.464       0.338\n",
      "log_price5     0.0250      0.157      0.160      0.874      -0.286       0.336\n",
      "disp1         -0.0114      0.039     -0.289      0.773      -0.089       0.067\n",
      "feat1          0.2797      0.042      6.640      0.000       0.196       0.363\n",
      "==============================================================================\n",
      "Omnibus:                        5.601   Durbin-Watson:                   1.733\n",
      "Prob(Omnibus):                  0.061   Jarque-Bera (JB):                8.622\n",
      "Skew:                           0.010   Prob(JB):                       0.0134\n",
      "Kurtosis:                       4.335   Cond. No.                         123.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "# step 1: build a model\n",
    "lm_best = smf.ols(formula =  \"\"\"log_sales1 ~ log_price1 +\n",
    "                                        log_price2 +\n",
    "                                        log_price3 +\n",
    "                                        log_price4 +\n",
    "                                        log_price5 +\n",
    "                                        disp1 +\n",
    "                                        feat1\"\"\",\n",
    "                                        data = df)\n",
    "\n",
    "\n",
    "# step 2: fit the model based on the data\n",
    "results_1 = lm_best.fit()\n",
    "\n",
    "# step 3: analyze the summary output\n",
    "print(results_1.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-27T20:01:47.911778Z",
     "start_time": "2021-03-27T20:01:47.889633Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:             log_sales1   R-squared:                       0.794\n",
      "Model:                            OLS   Adj. R-squared:                  0.781\n",
      "Method:                 Least Squares   F-statistic:                     59.46\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):           3.56e-34\n",
      "Time:                        16:01:47   Log-Likelihood:                 57.156\n",
      "No. Observations:                 116   AIC:                            -98.31\n",
      "Df Residuals:                     108   BIC:                            -76.28\n",
      "Df Model:                           7                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept      1.4345      0.482      2.977      0.004       0.479       2.390\n",
      "log_price1    -2.6540      0.232    -11.432      0.000      -3.114      -2.194\n",
      "log_price2     0.1441      0.317      0.455      0.650      -0.483       0.772\n",
      "log_price3     0.5562      0.185      3.008      0.003       0.190       0.923\n",
      "log_price4    -0.0630      0.202     -0.311      0.756      -0.464       0.338\n",
      "log_price5     0.0250      0.157      0.160      0.874      -0.286       0.336\n",
      "disp1         -0.0114      0.039     -0.289      0.773      -0.089       0.067\n",
      "feat1          0.2797      0.042      6.640      0.000       0.196       0.363\n",
      "==============================================================================\n",
      "Omnibus:                        5.601   Durbin-Watson:                   1.733\n",
      "Prob(Omnibus):                  0.061   Jarque-Bera (JB):                8.622\n",
      "Skew:                           0.010   Prob(JB):                       0.0134\n",
      "Kurtosis:                       4.335   Cond. No.                         123.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "# Re-running the the regression without variables with p-values above 0.05\n",
    "\n",
    "# step 1: build a model\n",
    "lm_best = smf.ols(formula =  \"\"\"log_sales1 ~ log_price1 +\n",
    "                                        log_price3 +\n",
    "                                        disp1 +\n",
    "                                        feat1\"\"\",\n",
    "                                        data = df)\n",
    "\n",
    "\n",
    "# step 2: fit the model based on the data\n",
    "results_1_opt = lm_best.fit()\n",
    "\n",
    "# step 3: analyze the summary output\n",
    "print(results_1.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Product 2: Tropicana Premium 96 oz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-27T20:01:47.939380Z",
     "start_time": "2021-03-27T20:01:47.915136Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:             log_sales2   R-squared:                       0.558\n",
      "Model:                            OLS   Adj. R-squared:                  0.530\n",
      "Method:                 Least Squares   F-statistic:                     19.51\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):           1.15e-16\n",
      "Time:                        16:01:47   Log-Likelihood:                 108.06\n",
      "No. Observations:                 116   AIC:                            -200.1\n",
      "Df Residuals:                     108   BIC:                            -178.1\n",
      "Df Model:                           7                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept      2.2913      0.317      7.225      0.000       1.663       2.920\n",
      "log_price1     0.3283      0.112      2.933      0.004       0.106       0.550\n",
      "log_price2    -1.5455      0.242     -6.395      0.000      -2.025      -1.066\n",
      "log_price3     0.0490      0.119      0.411      0.682      -0.187       0.286\n",
      "log_price4    -0.0348      0.133     -0.262      0.794      -0.299       0.229\n",
      "log_price5    -0.1156      0.101     -1.143      0.256      -0.316       0.085\n",
      "disp2          0.0162      0.025      0.644      0.521      -0.034       0.066\n",
      "feat2          0.1296      0.031      4.159      0.000       0.068       0.191\n",
      "==============================================================================\n",
      "Omnibus:                        0.793   Durbin-Watson:                   1.237\n",
      "Prob(Omnibus):                  0.673   Jarque-Bera (JB):                0.375\n",
      "Skew:                           0.008   Prob(JB):                        0.829\n",
      "Kurtosis:                       3.278   Cond. No.                         131.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "# step 1: build a model\n",
    "lm_best = smf.ols(formula =  \"\"\"log_sales2 ~ log_price1 +\n",
    "                                        log_price2 +\n",
    "                                        log_price3 +\n",
    "                                        log_price4 +\n",
    "                                        log_price5 +\n",
    "                                        disp2 +\n",
    "                                        feat2\"\"\",\n",
    "                                        data = df)\n",
    "\n",
    "\n",
    "# step 2: fit the model based on the data\n",
    "results_2 = lm_best.fit()\n",
    "\n",
    "# step 3: analyze the summary output\n",
    "print(results_2.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-27T20:01:47.962152Z",
     "start_time": "2021-03-27T20:01:47.942148Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:             log_sales2   R-squared:                       0.558\n",
      "Model:                            OLS   Adj. R-squared:                  0.530\n",
      "Method:                 Least Squares   F-statistic:                     19.51\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):           1.15e-16\n",
      "Time:                        16:01:47   Log-Likelihood:                 108.06\n",
      "No. Observations:                 116   AIC:                            -200.1\n",
      "Df Residuals:                     108   BIC:                            -178.1\n",
      "Df Model:                           7                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept      2.2913      0.317      7.225      0.000       1.663       2.920\n",
      "log_price1     0.3283      0.112      2.933      0.004       0.106       0.550\n",
      "log_price2    -1.5455      0.242     -6.395      0.000      -2.025      -1.066\n",
      "log_price3     0.0490      0.119      0.411      0.682      -0.187       0.286\n",
      "log_price4    -0.0348      0.133     -0.262      0.794      -0.299       0.229\n",
      "log_price5    -0.1156      0.101     -1.143      0.256      -0.316       0.085\n",
      "disp2          0.0162      0.025      0.644      0.521      -0.034       0.066\n",
      "feat2          0.1296      0.031      4.159      0.000       0.068       0.191\n",
      "==============================================================================\n",
      "Omnibus:                        0.793   Durbin-Watson:                   1.237\n",
      "Prob(Omnibus):                  0.673   Jarque-Bera (JB):                0.375\n",
      "Skew:                           0.008   Prob(JB):                        0.829\n",
      "Kurtosis:                       3.278   Cond. No.                         131.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "# Re-running the the regression without variables with p-values above 0.05\n",
    "\n",
    "# step 1: build a model\n",
    "lm_best = smf.ols(formula =  \"\"\"log_sales2 ~ log_price1 +\n",
    "                                        log_price2 +\n",
    "                                        disp2 +\n",
    "                                        feat2\"\"\",\n",
    "                                        data = df)\n",
    "\n",
    "\n",
    "# step 2: fit the model based on the data\n",
    "results_2_opt = lm_best.fit()\n",
    "\n",
    "# step 3: analyze the summary output\n",
    "print(results_2.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Product 3: Topicana 64 oz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-27T20:01:47.989966Z",
     "start_time": "2021-03-27T20:01:47.963910Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:             log_sales3   R-squared:                       0.712\n",
      "Model:                            OLS   Adj. R-squared:                  0.694\n",
      "Method:                 Least Squares   F-statistic:                     38.20\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):           1.85e-26\n",
      "Time:                        16:01:47   Log-Likelihood:                -30.148\n",
      "No. Observations:                 116   AIC:                             76.30\n",
      "Df Residuals:                     108   BIC:                             98.32\n",
      "Df Model:                           7                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept      2.3313      1.077      2.164      0.033       0.196       4.467\n",
      "log_price1     1.1542      0.364      3.168      0.002       0.432       1.876\n",
      "log_price2     1.0704      0.662      1.618      0.109      -0.241       2.382\n",
      "log_price3    -4.4184      0.474     -9.324      0.000      -5.358      -3.479\n",
      "log_price4     1.4386      0.457      3.151      0.002       0.534       2.344\n",
      "log_price5     0.0745      0.333      0.224      0.824      -0.586       0.735\n",
      "disp3          0.0879      0.074      1.186      0.238      -0.059       0.235\n",
      "feat3          0.4271      0.074      5.787      0.000       0.281       0.573\n",
      "==============================================================================\n",
      "Omnibus:                       11.283   Durbin-Watson:                   1.641\n",
      "Prob(Omnibus):                  0.004   Jarque-Bera (JB):               13.336\n",
      "Skew:                           0.578   Prob(JB):                      0.00127\n",
      "Kurtosis:                       4.192   Cond. No.                         130.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "# step 1: build a model\n",
    "lm_best = smf.ols(formula =  \"\"\"log_sales3 ~ log_price1 +\n",
    "                                        log_price2 +\n",
    "                                        log_price3 +\n",
    "                                        log_price4 +\n",
    "                                        log_price5 +\n",
    "                                        disp3 +\n",
    "                                        feat3\"\"\",\n",
    "                                        data = df)\n",
    "\n",
    "\n",
    "# step 2: fit the model based on the data\n",
    "results_3 = lm_best.fit()\n",
    "\n",
    "# step 3: analyze the summary output\n",
    "print(results_3.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-27T20:01:48.017610Z",
     "start_time": "2021-03-27T20:01:47.992793Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:             log_sales3   R-squared:                       0.712\n",
      "Model:                            OLS   Adj. R-squared:                  0.694\n",
      "Method:                 Least Squares   F-statistic:                     38.20\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):           1.85e-26\n",
      "Time:                        16:01:48   Log-Likelihood:                -30.148\n",
      "No. Observations:                 116   AIC:                             76.30\n",
      "Df Residuals:                     108   BIC:                             98.32\n",
      "Df Model:                           7                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept      2.3313      1.077      2.164      0.033       0.196       4.467\n",
      "log_price1     1.1542      0.364      3.168      0.002       0.432       1.876\n",
      "log_price2     1.0704      0.662      1.618      0.109      -0.241       2.382\n",
      "log_price3    -4.4184      0.474     -9.324      0.000      -5.358      -3.479\n",
      "log_price4     1.4386      0.457      3.151      0.002       0.534       2.344\n",
      "log_price5     0.0745      0.333      0.224      0.824      -0.586       0.735\n",
      "disp3          0.0879      0.074      1.186      0.238      -0.059       0.235\n",
      "feat3          0.4271      0.074      5.787      0.000       0.281       0.573\n",
      "==============================================================================\n",
      "Omnibus:                       11.283   Durbin-Watson:                   1.641\n",
      "Prob(Omnibus):                  0.004   Jarque-Bera (JB):               13.336\n",
      "Skew:                           0.578   Prob(JB):                      0.00127\n",
      "Kurtosis:                       4.192   Cond. No.                         130.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "# Re-running the the regression without variables with p-values above 0.05\n",
    "\n",
    "# step 1: build a model\n",
    "lm_best = smf.ols(formula =  \"\"\"log_sales3 ~ log_price1 +\n",
    "                                        log_price3 +\n",
    "                                        log_price4 +\n",
    "                                        disp3 +\n",
    "                                        feat3\"\"\",\n",
    "                                        data = df)\n",
    "\n",
    "\n",
    "# step 2: fit the model based on the data\n",
    "results_3_opt = lm_best.fit()\n",
    "\n",
    "# step 3: analyze the summary output\n",
    "print(results_3.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Product 4: Minute Maid 64 oz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-27T20:01:48.047656Z",
     "start_time": "2021-03-27T20:01:48.019582Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:             log_sales4   R-squared:                       0.752\n",
      "Model:                            OLS   Adj. R-squared:                  0.736\n",
      "Method:                 Least Squares   F-statistic:                     46.70\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):           7.43e-30\n",
      "Time:                        16:01:48   Log-Likelihood:                 22.112\n",
      "No. Observations:                 116   AIC:                            -28.22\n",
      "Df Residuals:                     108   BIC:                            -6.194\n",
      "Df Model:                           7                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept      2.7515      0.709      3.879      0.000       1.346       4.157\n",
      "log_price1     0.5407      0.243      2.228      0.028       0.060       1.022\n",
      "log_price2     0.2397      0.423      0.567      0.572      -0.598       1.078\n",
      "log_price3     0.6079      0.261      2.328      0.022       0.090       1.125\n",
      "log_price4    -2.7045      0.390     -6.935      0.000      -3.478      -1.931\n",
      "log_price5     0.5532      0.212      2.613      0.010       0.134       0.973\n",
      "disp4          0.0829      0.057      1.442      0.152      -0.031       0.197\n",
      "feat4          0.3769      0.057      6.646      0.000       0.265       0.489\n",
      "==============================================================================\n",
      "Omnibus:                       31.249   Durbin-Watson:                   1.827\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               68.303\n",
      "Skew:                           1.064   Prob(JB):                     1.47e-15\n",
      "Kurtosis:                       6.099   Cond. No.                         134.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "# step 1: build a model\n",
    "lm_best = smf.ols(formula =  \"\"\"log_sales4 ~ log_price1 +\n",
    "                                        log_price2 +\n",
    "                                        log_price3 +\n",
    "                                        log_price4 +\n",
    "                                        log_price5 +\n",
    "                                        disp4 +\n",
    "                                        feat4\"\"\",\n",
    "                                        data = df)\n",
    "\n",
    "\n",
    "# step 2: fit the model based on the data\n",
    "results_4 = lm_best.fit()\n",
    "\n",
    "# step 3: analyze the summary output\n",
    "print(results_4.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-27T20:01:48.073918Z",
     "start_time": "2021-03-27T20:01:48.049460Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:             log_sales4   R-squared:                       0.752\n",
      "Model:                            OLS   Adj. R-squared:                  0.736\n",
      "Method:                 Least Squares   F-statistic:                     46.70\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):           7.43e-30\n",
      "Time:                        16:01:48   Log-Likelihood:                 22.112\n",
      "No. Observations:                 116   AIC:                            -28.22\n",
      "Df Residuals:                     108   BIC:                            -6.194\n",
      "Df Model:                           7                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept      2.7515      0.709      3.879      0.000       1.346       4.157\n",
      "log_price1     0.5407      0.243      2.228      0.028       0.060       1.022\n",
      "log_price2     0.2397      0.423      0.567      0.572      -0.598       1.078\n",
      "log_price3     0.6079      0.261      2.328      0.022       0.090       1.125\n",
      "log_price4    -2.7045      0.390     -6.935      0.000      -3.478      -1.931\n",
      "log_price5     0.5532      0.212      2.613      0.010       0.134       0.973\n",
      "disp4          0.0829      0.057      1.442      0.152      -0.031       0.197\n",
      "feat4          0.3769      0.057      6.646      0.000       0.265       0.489\n",
      "==============================================================================\n",
      "Omnibus:                       31.249   Durbin-Watson:                   1.827\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               68.303\n",
      "Skew:                           1.064   Prob(JB):                     1.47e-15\n",
      "Kurtosis:                       6.099   Cond. No.                         134.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "# Re-running the the regression without variables with p-values above 0.05\n",
    "\n",
    "# step 1: build a model\n",
    "lm_best = smf.ols(formula =  \"\"\"log_sales4 ~ log_price1 +\n",
    "                                        log_price3 +\n",
    "                                        log_price4 +\n",
    "                                        log_price5 +\n",
    "                                        disp4 +\n",
    "                                        feat4\"\"\",\n",
    "                                        data = df)\n",
    "\n",
    "\n",
    "# step 2: fit the model based on the data\n",
    "results_4_opt = lm_best.fit()\n",
    "\n",
    "# step 3: analyze the summary output\n",
    "print(results_4.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Product 5: Dominick's 64 oz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-27T20:01:48.105841Z",
     "start_time": "2021-03-27T20:01:48.076437Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:             log_sales5   R-squared:                       0.667\n",
      "Model:                            OLS   Adj. R-squared:                  0.646\n",
      "Method:                 Least Squares   F-statistic:                     30.94\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):           4.05e-23\n",
      "Time:                        16:01:48   Log-Likelihood:                -21.400\n",
      "No. Observations:                 116   AIC:                             58.80\n",
      "Df Residuals:                     108   BIC:                             80.83\n",
      "Df Model:                           7                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept     -0.2585      0.941     -0.275      0.784      -2.123       1.606\n",
      "log_price1     0.0985      0.336      0.293      0.770      -0.567       0.764\n",
      "log_price2    -1.6637      0.611     -2.722      0.008      -2.875      -0.452\n",
      "log_price3     1.0508      0.365      2.876      0.005       0.327       1.775\n",
      "log_price4     1.1025      0.397      2.778      0.006       0.316       1.889\n",
      "log_price5    -3.2416      0.352     -9.219      0.000      -3.939      -2.545\n",
      "disp5          0.1224      0.063      1.958      0.053      -0.002       0.246\n",
      "feat5          0.2862      0.067      4.256      0.000       0.153       0.420\n",
      "==============================================================================\n",
      "Omnibus:                        4.625   Durbin-Watson:                   1.679\n",
      "Prob(Omnibus):                  0.099   Jarque-Bera (JB):                4.684\n",
      "Skew:                          -0.270   Prob(JB):                       0.0962\n",
      "Kurtosis:                       3.823   Cond. No.                         123.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "# step 1: build a model\n",
    "lm_best = smf.ols(formula =  \"\"\"log_sales5 ~ log_price1 +\n",
    "                                        log_price2 +\n",
    "                                        log_price3 +\n",
    "                                        log_price4 +\n",
    "                                        log_price5 +\n",
    "                                        disp5 +\n",
    "                                        feat5\"\"\",\n",
    "                                        data = df)\n",
    "\n",
    "\n",
    "# step 2: fit the model based on the data\n",
    "results_5 = lm_best.fit()\n",
    "\n",
    "# step 3: analyze the summary output\n",
    "print(results_5.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-27T20:01:48.131089Z",
     "start_time": "2021-03-27T20:01:48.107605Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:             log_sales5   R-squared:                       0.667\n",
      "Model:                            OLS   Adj. R-squared:                  0.649\n",
      "Method:                 Least Squares   F-statistic:                     36.39\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):           6.66e-24\n",
      "Time:                        16:01:48   Log-Likelihood:                -21.446\n",
      "No. Observations:                 116   AIC:                             56.89\n",
      "Df Residuals:                     109   BIC:                             76.17\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept     -0.2921      0.930     -0.314      0.754      -2.135       1.551\n",
      "log_price2    -1.6261      0.595     -2.733      0.007      -2.806      -0.447\n",
      "log_price3     1.0544      0.364      2.900      0.005       0.334       1.775\n",
      "log_price4     1.1239      0.389      2.893      0.005       0.354       1.894\n",
      "log_price5    -3.2319      0.349     -9.272      0.000      -3.923      -2.541\n",
      "disp5          0.1240      0.062      1.999      0.048       0.001       0.247\n",
      "feat5          0.2871      0.067      4.291      0.000       0.154       0.420\n",
      "==============================================================================\n",
      "Omnibus:                        4.516   Durbin-Watson:                   1.680\n",
      "Prob(Omnibus):                  0.105   Jarque-Bera (JB):                4.471\n",
      "Skew:                          -0.274   Prob(JB):                        0.107\n",
      "Kurtosis:                       3.790   Cond. No.                         113.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "# Re-running the the regression without variables with p-values above 0.05\n",
    "\n",
    "# step 1: build a model\n",
    "lm_best_opt = smf.ols(formula =  \"\"\"log_sales5 ~ log_price2 +\n",
    "                                        log_price3 +\n",
    "                                        log_price4 +\n",
    "                                        log_price5 +\n",
    "                                        disp5 +\n",
    "                                        feat5\"\"\",\n",
    "                                        data = df)\n",
    "\n",
    "\n",
    "# step 2: fit the model based on the data\n",
    "results_5_opt = lm_best_opt.fit()\n",
    "\n",
    "# step 3: analyze the summary output\n",
    "print(results_5_opt.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br><br>\n",
    "\n",
    "# Part 2: Monte Carlo\n",
    "\n",
    "## Constant Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-27T20:01:48.158496Z",
     "start_time": "2021-03-27T20:01:48.132830Z"
    }
   },
   "outputs": [],
   "source": [
    "# Setup constant variables\n",
    "\n",
    "# Ounces per SKU\n",
    "oz_1 = 64\n",
    "oz_2 = 96\n",
    "oz_3 = 64\n",
    "oz_4 = 64\n",
    "oz_5 = 64\n",
    "\n",
    "# set up \"known\" parameters based historical averages (without log transformation):\n",
    "grmar1_avg = df['grmar1'].mean()\n",
    "grmar2_avg = df['grmar2'].mean()\n",
    "grmar3_avg = df['grmar3'].mean()\n",
    "grmar4_avg = df['grmar4'].mean()\n",
    "grmar5_avg = df['grmar5'].mean()\n",
    "\n",
    "# set up \"known\" parameters based on log of historical averages:\n",
    "price1_avg_log = np.log10(df['price1'].mean())\n",
    "price2_avg_log = np.log10(df['price2'].mean())\n",
    "price3_avg_log = np.log10(df['price3'].mean())\n",
    "price4_avg_log = np.log10(df['price4'].mean())\n",
    "price5_avg_log = np.log10(df['price5'].mean())\n",
    "\n",
    "\n",
    "\n",
    "##############################################################################\n",
    "# set up random draw parameters for coefficients - SKU1\n",
    "\n",
    "# intercept \n",
    "intercept_mu_1    = results_1_opt.params[0]  # coefficient from regression\n",
    "intercept_sigma_1 = results_1_opt.bse[0]     # standard error from regression\n",
    "\n",
    "# price SKU1\n",
    "B1_mu_P1_1    = results_1_opt.params[1]      # coefficient from regression\n",
    "B1_sigma_P1_1 = results_1_opt.bse[1]         # standard error from regression\n",
    "\n",
    "# price SKU3\n",
    "B2_mu_P3_1    = results_1_opt.params[2]      # coefficient from regression\n",
    "B2_sigma_P3_1 = results_1_opt.bse[2]         # standard error from regression\n",
    "\n",
    "# disp1 SKU1\n",
    "B3_mu_D1_1 = results_1_opt.params[3]         # coefficient from regression\n",
    "\n",
    "# feat1 SKU1\n",
    "B4_mu_F1_1 = results_1_opt.params[4]         # coefficient from regression\n",
    "\n",
    "\n",
    "##############################################################################\n",
    "# set up random draw parameters for coefficients - SKU2\n",
    "\n",
    "# intercept \n",
    "intercept_mu_2    = results_2_opt.params[0] # coefficient from regression\n",
    "intercept_sigma_2 = results_2_opt.bse[0]    # standard error from regression\n",
    "\n",
    "# price SKU1\n",
    "B1_mu_P1_2    = results_2_opt.params[1]     # coefficient from regression\n",
    "B1_sigma_P1_2 = results_2_opt.bse[1]        # standard error from regression\n",
    "\n",
    "# price SKU2\n",
    "B2_mu_P2_2    = results_2_opt.params[2]     # coefficient from regression\n",
    "B2_sigma_P2_2 = results_2_opt.bse[2]        # standard error from regression\n",
    "\n",
    "# disp2 SKU2\n",
    "B3_mu_D2_2 = results_2_opt.params[3]        # coefficient from regression\n",
    "\n",
    "# feat2 SKU2\n",
    "B4_mu_F2_2 = results_2_opt.params[4]        # coefficient from regression\n",
    "\n",
    "\n",
    "##############################################################################\n",
    "# set up random draw parameters for coefficients - SKU3\n",
    "\n",
    "# intercept \n",
    "intercept_mu_3    = results_3_opt.params[0]  # coefficient from regression\n",
    "intercept_sigma_3 = results_3_opt.bse[0]     # standard error from regression\n",
    "\n",
    "# price SKU1\n",
    "B1_mu_P1_3    = results_3_opt.params[1]      # coefficient from regression\n",
    "B1_sigma_P1_3 = results_3_opt.bse[1]         # standard error from regression\n",
    "\n",
    "# price SKU3 \n",
    "B2_mu_P3_3    = results_3_opt.params[2]      # coefficient from regression\n",
    "B2_sigma_P3_3 = results_3_opt.bse[2]         # standard error from regression\n",
    "\n",
    "# feat2 SKU4\n",
    "B3_mu_P4_3    = results_3_opt.params[3]      # coefficient from regression\n",
    "B3_sigma_P4_3 = results_3_opt.bse[3]         # standard error from regression\n",
    "\n",
    "# disp3 SKU3\n",
    "B4_mu_D3_3 = results_3_opt.params[4]         # coefficient from regression\n",
    "\n",
    "# feat3 SKU3\n",
    "B5_mu_F3_3 = results_3_opt.params[5]         # coefficient from regression\n",
    "\n",
    "\n",
    "##############################################################################\n",
    "# set up random draw parameters for coefficients - SKU4\n",
    "\n",
    "# intercept \n",
    "intercept_mu_4    = results_4_opt.params[0]  # coefficient from regression\n",
    "intercept_sigma_4 = results_4_opt.bse[0]     # standard error from regression\n",
    "\n",
    "# price SKU1\n",
    "B1_mu_P1_4    = results_4_opt.params[1]      # coefficient from regression\n",
    "B1_sigma_P1_4 = results_4_opt.bse[1]         # standard error from regression\n",
    "\n",
    "# price SKU3\n",
    "B2_mu_P3_4    = results_4_opt.params[2]      # coefficient from regression\n",
    "B2_sigma_P3_4 = results_4_opt.bse[2]         # standard error from regression\n",
    "\n",
    "# price  SKU4\n",
    "B3_mu_P4_4    = results_4_opt.params[3]      # coefficient from regression\n",
    "B3_sigma_P4_4 = results_4_opt.bse[3]         # standard error from regression\n",
    "\n",
    "# price SKU5\n",
    "B4_mu_P5_4    = results_4_opt.params[4]      # coefficient from regression\n",
    "B4_sigma_P5_4 = results_4_opt.bse[4]         # standard error from regression\n",
    "\n",
    "# disp4 SKU4\n",
    "B5_mu_D4_4 = results_4_opt.params[5]         # coefficient from regression\n",
    "\n",
    "# feat4 SKU4\n",
    "B6_mu_F4_4 = results_4_opt.params[6]         # coefficient from regression\n",
    "\n",
    "\n",
    "##############################################################################\n",
    "# set up random draw parameters for coefficients - SKU5 \n",
    "\n",
    "# intercept \n",
    "intercept_mu_5    = results_5_opt.params[0]  # coefficient from regression\n",
    "intercept_sigma_5 = results_5_opt.bse[0]     # standard error from regression\n",
    "\n",
    "# price SKU2\n",
    "B1_mu_P2_5    = results_5_opt.params[1]      # coefficient from regression\n",
    "B1_sigma_P2_5 = results_5_opt.bse[1]         # standard error from regression\n",
    "\n",
    "# price SKU3\n",
    "B2_mu_P3_5    = results_5_opt.params[2]      # coefficient from regression\n",
    "B2_sigma_P3_5 = results_5_opt.bse[2]         # standard error from regression\n",
    "\n",
    "# price SKU4\n",
    "B3_mu_P4_5    = results_5_opt.params[3]      # coefficient from regression\n",
    "B3_sigma_P4_5 = results_5.bse[3]             # standard error from regression\n",
    "\n",
    "# price SKU5\n",
    "B4_mu_P5_5    = results_5_opt.params[4]      # coefficient from regression\n",
    "B4_sigma_P5_5 = results_5_opt.bse[4]         # standard error from regression\n",
    "\n",
    "# disp SKU5\n",
    "B5_mu_D5_5    = results_5_opt.params[5]      # coefficient from regression\n",
    "\n",
    "# feat5 SKU5\n",
    "B6_mu_F5_5    = results_5_opt.params[6]      # coefficient from regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br>\n",
    "\n",
    "## Simulation (Iterating over Price_5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-27T20:01:51.450466Z",
     "start_time": "2021-03-27T20:01:48.160455Z"
    },
    "code_folding": [],
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Simulation\n",
    "\n",
    "# set up Simulation parameters\n",
    "np.random.seed(42)  # fix the random seed for reproducibility \n",
    "\n",
    "number_sims = 1_000\n",
    "\n",
    "# Min Max Prices for SKU5\n",
    "min_price5 = df['price5'].min()\n",
    "max_price5 = df['price5'].max()\n",
    "\n",
    "\n",
    "# Store results from each simulation here\n",
    "final_stats = []\n",
    "\n",
    "for P_5 in arange(min_price5, max_price5,0.001):\n",
    "    \n",
    "    all_stats = []\n",
    "\n",
    "    # Begin Simulation Loop\n",
    "    for i in range(number_sims):\n",
    "        \n",
    "        ###########\n",
    "        #  SKU1   # \n",
    "        ###########\n",
    "        \n",
    "        intercept_1 = np.random.normal(intercept_mu_1, intercept_sigma_1)\n",
    "        B1_1   = np.random.normal(B1_mu_P1_1, B1_sigma_P1_1)\n",
    "        B2_1   = np.random.normal(B2_mu_P3_1, B2_sigma_P3_1)   \n",
    "        feat1  = np.random.randint(2)\n",
    "        disp1  = np.random.randint(2)\n",
    "        \n",
    "        sales_1 = np.exp(intercept_1 \\\n",
    "                + B1_1 * price1_avg_log \\\n",
    "                + B2_1 * price3_avg_log \\\n",
    "                + B3_mu_D1_1 * disp1 \\\n",
    "                + B4_mu_F1_1 * feat1)\n",
    "        revenue_1 = sales_1 * oz_1 * np.exp(price1_avg_log)\n",
    "        profits_1 = revenue_1 * grmar1_avg\n",
    "        \n",
    "        \n",
    "        ###########\n",
    "        #  SKU2   # \n",
    "        ###########\n",
    "        \n",
    "        intercept_2 = np.random.normal(intercept_mu_2, intercept_sigma_2)\n",
    "        B1_2   = np.random.normal(B1_mu_P1_2, B1_sigma_P1_2)\n",
    "        B2_2   = np.random.normal(B2_mu_P2_2, B2_sigma_P2_2)   \n",
    "        feat2  = np.random.randint(2)\n",
    "        disp2  = np.random.randint(2)\n",
    "        \n",
    "        sales_2 = np.exp(intercept_2 \\\n",
    "                + B1_2 * price1_avg_log \\\n",
    "                + B2_2 * price2_avg_log \\\n",
    "                + B3_mu_D2_2 * disp2 \\\n",
    "                + B4_mu_F2_2 * feat2)\n",
    "        \n",
    "        revenue_2 = sales_2 * oz_2 * np.exp(price2_avg_log)\n",
    "        profits_2 = revenue_2 * grmar2_avg\n",
    "        \n",
    "                \n",
    "        ###########\n",
    "        #  SKU3   # \n",
    "        ###########\n",
    "        \n",
    "        intercept_3 = np.random.normal(intercept_mu_3, intercept_sigma_3)\n",
    "        B1_3   = np.random.normal(B1_mu_P1_3, B1_sigma_P1_3)\n",
    "        B2_3   = np.random.normal(B2_mu_P3_3, B2_sigma_P3_3)   \n",
    "        B3_3   = np.random.normal(B3_mu_P4_3, B3_sigma_P4_3) \n",
    "        feat3  = np.random.randint(2)\n",
    "        disp3  = np.random.randint(2)\n",
    "        \n",
    "        sales_3 = np.exp(intercept_3 \\\n",
    "                + B1_3 * price1_avg_log \\\n",
    "                + B2_3 * price3_avg_log \\\n",
    "                + B3_3 * price4_avg_log \\\n",
    "                + B4_mu_D3_3 * disp3 \\\n",
    "                + B5_mu_F3_3 * feat3)\n",
    "        \n",
    "        revenue_3 = sales_3 * oz_3 * np.exp(price3_avg_log)\n",
    "        profits_3 = revenue_3 * grmar3_avg\n",
    "        \n",
    "        \n",
    "        ###########\n",
    "        #  SKU4   # \n",
    "        ###########\n",
    "        \n",
    "        intercept_4 = np.random.normal(intercept_mu_4, intercept_sigma_4)\n",
    "        B1_4   = np.random.normal(B1_mu_P1_4, B1_sigma_P1_4)\n",
    "        B2_4   = np.random.normal(B2_mu_P3_4, B2_sigma_P3_4)   \n",
    "        B3_4   = np.random.normal(B3_mu_P4_4, B3_sigma_P4_5) \n",
    "        B4_4   = np.random.normal(B4_mu_P5_5, B4_sigma_P5_5)\n",
    "        feat4  = np.random.randint(2)\n",
    "        disp4  = np.random.randint(2)\n",
    "        \n",
    "        sales_4 = np.exp(intercept_4 \\\n",
    "                + B1_4 * price1_avg_log \\\n",
    "                + B2_4 * price3_avg_log \\\n",
    "                + B3_4 * price4_avg_log \\\n",
    "                + B4_4 * (np.log10(P_5)) \\\n",
    "                + B5_mu_D4_4 * disp4 \\\n",
    "                + B6_mu_F4_4 * feat4)\n",
    "        \n",
    "        revenue_4 = sales_4 * oz_4 * np.exp(price4_avg_log)\n",
    "        profits_4 = revenue_4 * grmar4_avg\n",
    "        \n",
    "        \n",
    "        ###########\n",
    "        #  SKU5   # \n",
    "        ###########\n",
    "        \n",
    "        intercept_5 = np.random.normal(intercept_mu_5, intercept_sigma_5)\n",
    "        B1_5   = np.random.normal(B1_mu_P2_5, B1_sigma_P2_5)\n",
    "        B2_5   = np.random.normal(B2_mu_P3_5, B2_sigma_P3_5)   \n",
    "        B3_5   = np.random.normal(B3_mu_P4_5, B3_sigma_P4_5) \n",
    "        B4_5   = np.random.normal(B4_mu_P5_5, B4_sigma_P5_5) \n",
    "        feat5  = np.random.randint(2)\n",
    "        disp5  = np.random.randint(2)\n",
    "        \n",
    "        sales_5 = np.exp(intercept_5 \\\n",
    "                + B1_5 * price2_avg_log \\\n",
    "                + B2_5 * price3_avg_log \\\n",
    "                + B3_5 * price4_avg_log \\\n",
    "                + B4_5 * (np.log10(P_5)) \\\n",
    "                + B5_mu_D5_5 * disp5 \\\n",
    "                + B6_mu_F5_5 * feat5)\n",
    "        \n",
    "        revenue_5 = sales_5 * oz_5 * P_5\n",
    "        profits_5 = revenue_5 * grmar5_avg\n",
    "        \n",
    "        \n",
    "        ####################\n",
    "        #  Appending SKUs  # \n",
    "        ####################\n",
    "        \n",
    "        \n",
    "        all_stats.append([sales_5, revenue_5, profits_5, disp5, feat5, \n",
    "                          sales_4, revenue_4, profits_4, disp4, feat4, \n",
    "                          sales_3, revenue_3, profits_3, disp3, feat3,\n",
    "                          sales_2, revenue_2, profits_2, disp2, feat2,\n",
    "                          sales_1, revenue_1, profits_1, disp1, feat1,])\n",
    "        \n",
    "           \n",
    "    results_df = pd.DataFrame.from_records(all_stats, columns =\n",
    "    ['units_sold_5','revenue_5','profits_5','disp_5','feat_5',\n",
    "     'units_sold_4','revenue_4','profits_4','disp_4','feat_4',\n",
    "     'units_sold_3','revenue_3','profits_3','disp_3','feat_3',\n",
    "     'units_sold_2','revenue_2','profits_2','disp_2','feat_2',\n",
    "     'units_sold_1','revenue_1','profits_1','disp_1','feat_1'])\n",
    "        \n",
    "    final_stats.append([P_5,\n",
    "                        results_df['profits_5'].mean(),\n",
    "                        results_df['profits_4'].mean(),\n",
    "                        results_df['profits_3'].mean(),\n",
    "                        results_df['profits_2'].mean(),\n",
    "                        results_df['profits_1'].mean(),\n",
    "                        results_df['feat_5'].value_counts().idxmax(), # most frequent value\n",
    "                        results_df['feat_4'].value_counts().idxmax(),\n",
    "                        results_df['feat_3'].value_counts().idxmax(),\n",
    "                        results_df['feat_2'].value_counts().idxmax(),\n",
    "                        results_df['feat_1'].value_counts().idxmax(),\n",
    "                        results_df['disp_5'].value_counts().idxmax(),\n",
    "                        results_df['disp_4'].value_counts().idxmax(),\n",
    "                        results_df['disp_3'].value_counts().idxmax(),\n",
    "                        results_df['disp_2'].value_counts().idxmax(),\n",
    "                        results_df['disp_1'].value_counts().idxmax()])\n",
    "    \n",
    "final_stats_df = pd.DataFrame.from_records(final_stats, columns =\n",
    "                ['Price per Oz_5', 'Profits_5', 'Profits_4', \n",
    "                 'Profits_3', 'Profits_2', 'Profits_1',\n",
    "                 'Feat_5', 'Feat_4', 'Feat_3', 'Feat_2', 'Feat_1',\n",
    "                 'Disp_5', 'Disp_4', 'Disp_3', 'Disp_2', 'Disp_1',])\n",
    "\n",
    "final_stats_df['Total Profits'] = final_stats_df['Profits_5']\\\n",
    "                                + final_stats_df['Profits_4']\\\n",
    "                                + final_stats_df['Profits_3']\\\n",
    "                                + final_stats_df['Profits_2']\\\n",
    "                                + final_stats_df['Profits_1']\n",
    "\n",
    "\n",
    "# Plot scatterplot\n",
    "final_stats_df.plot.scatter(x = \"Price per Oz_5\", y = \"Profits_5\");\n",
    "final_stats_df.plot.scatter(x = \"Price per Oz_5\", y = \"Total Profits\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-27T20:01:51.464895Z",
     "start_time": "2021-03-27T20:01:51.451813Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Price per Oz_5</th>\n",
       "      <th>Profits_5</th>\n",
       "      <th>Profits_4</th>\n",
       "      <th>Profits_3</th>\n",
       "      <th>Profits_2</th>\n",
       "      <th>Profits_1</th>\n",
       "      <th>Feat_5</th>\n",
       "      <th>Feat_4</th>\n",
       "      <th>Feat_3</th>\n",
       "      <th>Feat_2</th>\n",
       "      <th>Feat_1</th>\n",
       "      <th>Disp_5</th>\n",
       "      <th>Disp_4</th>\n",
       "      <th>Disp_3</th>\n",
       "      <th>Disp_2</th>\n",
       "      <th>Disp_1</th>\n",
       "      <th>Total Profits</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.020469</td>\n",
       "      <td>104.884505</td>\n",
       "      <td>247539.447647</td>\n",
       "      <td>479.783512</td>\n",
       "      <td>488.924742</td>\n",
       "      <td>366.204341</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>248979.244746</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Price per Oz_5   Profits_5      Profits_4   Profits_3   Profits_2  \\\n",
       "5        0.020469  104.884505  247539.447647  479.783512  488.924742   \n",
       "\n",
       "    Profits_1  Feat_5  Feat_4  Feat_3  Feat_2  Feat_1  Disp_5  Disp_4  Disp_3  \\\n",
       "5  366.204341       1       1       0       0       1       1       1       0   \n",
       "\n",
       "   Disp_2  Disp_1  Total Profits  \n",
       "5       0       0  248979.244746  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Identify Best Pricing & Marketing Settings for Maximum Profit for SKU5\n",
    "index5 = final_stats_df.loc[final_stats_df['Profits_5'] == final_stats_df['Profits_5'].max(),:].index\n",
    "final_stats_df.iloc[index5,:]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br>\n",
    "\n",
    "## Simulation (Iterating over Price_4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-27T20:01:54.790041Z",
     "start_time": "2021-03-27T20:01:51.466285Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Simulation\n",
    "\n",
    "# set up Simulation parameters\n",
    "np.random.seed(42)  # fix the random seed for reproducibility \n",
    "\n",
    "number_sims = 1_000\n",
    "\n",
    "# Min Max Prices for SKU4\n",
    "min_price4 = df['price4'].min()\n",
    "max_price4 = df['price4'].max()\n",
    "\n",
    "# Store results from each simulation here\n",
    "final_stats = []\n",
    "\n",
    "for P_4 in arange(min_price4, max_price4,0.001):\n",
    "    \n",
    "    all_stats = []\n",
    "\n",
    "    # Begin Simulation Loop\n",
    "    for i in range(number_sims):\n",
    "        \n",
    "        ###########\n",
    "        #  SKU1   # \n",
    "        ###########\n",
    "        \n",
    "        intercept_1 = np.random.normal(intercept_mu_1, intercept_sigma_1)\n",
    "        B1_1   = np.random.normal(B1_mu_P1_1, B1_sigma_P1_1)\n",
    "        B2_1   = np.random.normal(B2_mu_P3_1, B2_sigma_P3_1)   \n",
    "        feat1  = np.random.randint(2)\n",
    "        disp1  = np.random.randint(2)\n",
    "        \n",
    "        sales_1 = np.exp(intercept_1 \\\n",
    "                + B1_1 * price1_avg_log \\\n",
    "                + B2_1 * price3_avg_log \\\n",
    "                + B3_mu_D1_1 * disp1 \\\n",
    "                + B4_mu_F1_1 * feat1)\n",
    "        revenue_1 = sales_1 * oz_1 * np.exp(price1_avg_log)\n",
    "        profits_1 = revenue_1 * grmar1_avg\n",
    "        \n",
    "        \n",
    "        ###########\n",
    "        #  SKU2   # \n",
    "        ###########\n",
    "        \n",
    "        intercept_2 = np.random.normal(intercept_mu_2, intercept_sigma_2)\n",
    "        B1_2   = np.random.normal(B1_mu_P1_2, B1_sigma_P1_2)\n",
    "        B2_2   = np.random.normal(B2_mu_P2_2, B2_sigma_P2_2)   \n",
    "        feat2  = np.random.randint(2)\n",
    "        disp2  = np.random.randint(2)\n",
    "        \n",
    "        sales_2 = np.exp(intercept_2 \\\n",
    "                + B1_2 * price1_avg_log \\\n",
    "                + B2_2 * price2_avg_log \\\n",
    "                + B3_mu_D2_2 * disp2 \\\n",
    "                + B4_mu_F2_2 * feat2)\n",
    "        \n",
    "        revenue_2 = sales_2 * oz_2 * np.exp(price2_avg_log)\n",
    "        profits_2 = revenue_2 * grmar2_avg\n",
    "        \n",
    "                \n",
    "        ###########\n",
    "        #  SKU3   # \n",
    "        ###########\n",
    "        \n",
    "        intercept_3 = np.random.normal(intercept_mu_3, intercept_sigma_3)\n",
    "        B1_3   = np.random.normal(B1_mu_P1_3, B1_sigma_P1_3)\n",
    "        B2_3   = np.random.normal(B2_mu_P3_3, B2_sigma_P3_3)   \n",
    "        B3_3   = np.random.normal(B3_mu_P4_3, B3_sigma_P4_3) \n",
    "        feat3  = np.random.randint(2)\n",
    "        disp3  = np.random.randint(2)\n",
    "        \n",
    "        sales_3 = np.exp(intercept_3 \\\n",
    "                + B1_3 * price1_avg_log \\\n",
    "                + B2_3 * price3_avg_log \\\n",
    "                + B3_3 * (np.log10(P_4)) \\\n",
    "                + B4_mu_D3_3 * disp3 \\\n",
    "                + B5_mu_F3_3 * feat3)\n",
    "        \n",
    "        revenue_3 = sales_3 * oz_3 * np.exp(price3_avg_log)\n",
    "        profits_3 = revenue_3 * grmar3_avg\n",
    "        \n",
    "        \n",
    "        ###########\n",
    "        #  SKU4   # \n",
    "        ###########\n",
    "        \n",
    "        intercept_4 = np.random.normal(intercept_mu_4, intercept_sigma_4)\n",
    "        B1_4   = np.random.normal(B1_mu_P1_4, B1_sigma_P1_4)\n",
    "        B2_4   = np.random.normal(B2_mu_P3_4, B2_sigma_P3_4)   \n",
    "        B3_4   = np.random.normal(B3_mu_P4_4, B3_sigma_P4_5) \n",
    "        B4_4   = np.random.normal(B4_mu_P5_5, B4_sigma_P5_5)\n",
    "        feat4  = np.random.randint(2)\n",
    "        disp4  = np.random.randint(2)\n",
    "        \n",
    "        sales_4 = np.exp(intercept_4 \\\n",
    "                + B1_4 * price1_avg_log \\\n",
    "                + B2_4 * price3_avg_log \\\n",
    "                + B3_4 * (np.log10(P_4)) \\\n",
    "                + B4_4 * price5_avg_log \\\n",
    "                + B5_mu_D4_4 * disp4 \\\n",
    "                + B6_mu_F4_4 * feat4)\n",
    "        \n",
    "        revenue_4 = sales_4 * oz_4 * P_4\n",
    "        profits_4 = revenue_4 * grmar4_avg\n",
    "        \n",
    "        \n",
    "        ###########\n",
    "        #  SKU5   # \n",
    "        ###########\n",
    "        \n",
    "        intercept_5 = np.random.normal(intercept_mu_5, intercept_sigma_5)\n",
    "        B1_5   = np.random.normal(B1_mu_P2_5, B1_sigma_P2_5)\n",
    "        B2_5   = np.random.normal(B2_mu_P3_5, B2_sigma_P3_5)   \n",
    "        B3_5   = np.random.normal(B3_mu_P4_5, B3_sigma_P4_5) \n",
    "        B4_5   = np.random.normal(B4_mu_P5_5, B4_sigma_P5_5)\n",
    "        feat5  = np.random.randint(2)\n",
    "        disp5  = np.random.randint(2)\n",
    "        \n",
    "        sales_5 = np.exp(intercept_5 \\\n",
    "                + B1_5 * price2_avg_log \\\n",
    "                + B2_5 * price3_avg_log \\\n",
    "                + B3_5 * (np.log10(P_4)) \\\n",
    "                + B4_5 * price5_avg_log \\\n",
    "                + B5_mu_D5_5 * disp5 \\\n",
    "                + B6_mu_F5_5 * feat5)\n",
    "        \n",
    "        revenue_5 = sales_5 * oz_5 * np.exp(price5_avg_log)\n",
    "        profits_5 = revenue_5 * grmar5_avg\n",
    "        \n",
    "        \n",
    "        ####################\n",
    "        #  Appending SKUs  # \n",
    "        ####################\n",
    "        \n",
    "        \n",
    "        all_stats.append([sales_5, revenue_5, profits_5, disp5, feat5, \n",
    "                          sales_4, revenue_4, profits_4, disp4, feat4, \n",
    "                          sales_3, revenue_3, profits_3, disp3, feat3,\n",
    "                          sales_2, revenue_2, profits_2, disp2, feat2,\n",
    "                          sales_1, revenue_1, profits_1, disp1, feat1,])\n",
    "        \n",
    "           \n",
    "    results_df = pd.DataFrame.from_records(all_stats, columns =\n",
    "    ['units_sold_5','revenue_5','profits_5','disp_5','feat_5',\n",
    "     'units_sold_4','revenue_4','profits_4','disp_4','feat_4',\n",
    "     'units_sold_3','revenue_3','profits_3','disp_3','feat_3',\n",
    "     'units_sold_2','revenue_2','profits_2','disp_2','feat_2',\n",
    "     'units_sold_1','revenue_1','profits_1','disp_1','feat_1'])\n",
    "        \n",
    "    final_stats.append([P_4,\n",
    "                        results_df['profits_5'].mean(),\n",
    "                        results_df['profits_4'].mean(),\n",
    "                        results_df['profits_3'].mean(),\n",
    "                        results_df['profits_2'].mean(),\n",
    "                        results_df['profits_1'].mean(),\n",
    "                        results_df['feat_5'].value_counts().idxmax(), # most frequent value\n",
    "                        results_df['feat_4'].value_counts().idxmax(),\n",
    "                        results_df['feat_3'].value_counts().idxmax(),\n",
    "                        results_df['feat_2'].value_counts().idxmax(),\n",
    "                        results_df['feat_1'].value_counts().idxmax(),\n",
    "                        results_df['disp_5'].value_counts().idxmax(),\n",
    "                        results_df['disp_4'].value_counts().idxmax(),\n",
    "                        results_df['disp_3'].value_counts().idxmax(),\n",
    "                        results_df['disp_2'].value_counts().idxmax(),\n",
    "                        results_df['disp_1'].value_counts().idxmax()])\n",
    "    \n",
    "final_stats_df = pd.DataFrame.from_records(final_stats, columns =\n",
    "                ['Price per Oz_4', 'Profits_5', 'Profits_4', \n",
    "                 'Profits_3', 'Profits_2', 'Profits_1',\n",
    "                 'Feat_5', 'Feat_4', 'Feat_3', 'Feat_2', 'Feat_1',\n",
    "                 'Disp_5', 'Disp_4', 'Disp_3', 'Disp_2', 'Disp_1',])\n",
    "\n",
    "final_stats_df['Total Profits'] = final_stats_df['Profits_5']\\\n",
    "                                + final_stats_df['Profits_4']\\\n",
    "                                + final_stats_df['Profits_3']\\\n",
    "                                + final_stats_df['Profits_2']\\\n",
    "                                + final_stats_df['Profits_1']\n",
    "\n",
    "\n",
    "# Plot scatterplot\n",
    "final_stats_df.plot.scatter(x = \"Price per Oz_4\", y = \"Profits_4\");\n",
    "final_stats_df.plot.scatter(x = \"Price per Oz_4\", y = \"Total Profits\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part 3: Simulation (Iterating over All Prices)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-27T20:35:15.449679Z",
     "start_time": "2021-03-27T20:35:15.025616Z"
    }
   },
   "outputs": [],
   "source": [
    "# Price Simulations\n",
    "\n",
    "# Min Max Prices for SKU#\n",
    "min_price1 = df['price1'].min()\n",
    "max_price1 = df['price1'].max()\n",
    "\n",
    "min_price2 = df['price2'].min()\n",
    "max_price2 = df['price2'].max()\n",
    "\n",
    "min_price3 = df['price3'].min()\n",
    "max_price3 = df['price3'].max()\n",
    "\n",
    "min_price4 = df['price4'].min()\n",
    "max_price4 = df['price4'].max()\n",
    "\n",
    "min_price5 = df['price5'].min()\n",
    "max_price5 = df['price5'].max()\n",
    "\n",
    "# Number of iterations\n",
    "n = 1000\n",
    "\n",
    "price_increment_1 = (max_price1 - min_price1)/n\n",
    "price_increment_2 = (max_price2 - min_price2)/n\n",
    "price_increment_3 = (max_price3 - min_price3)/n\n",
    "price_increment_4 = (max_price4 - min_price4)/n\n",
    "price_increment_5 = (max_price5 - min_price5)/n\n",
    "\n",
    "price_df = pd.DataFrame()\n",
    "\n",
    "price_df['P_1'] = arange(min_price1, max_price1, price_increment_1)\n",
    "price_df['P_2'] = arange(min_price2, max_price2, price_increment_2)\n",
    "price_df['P_3'] = arange(min_price3, max_price3, price_increment_3)\n",
    "price_df['P_4'] = arange(min_price4, max_price4, price_increment_4)\n",
    "price_df['P_5'] = arange(min_price5, max_price5, price_increment_5)\n",
    "\n",
    "price_df = shuffle(df = price_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "start_time": "2021-03-27T20:35:15.931Z"
    }
   },
   "outputs": [],
   "source": [
    "# Simulation\n",
    "\n",
    "# set up Simulation parameters\n",
    "np.random.seed(42)  # fix the random seed for reproducibility \n",
    "\n",
    "number_sims = 100_000\n",
    "\n",
    "# Store results from each simulation here\n",
    "final_stats = []\n",
    "\n",
    "# Loop over price dataframe\n",
    "for i in range(len(price_df)):\n",
    "    \n",
    "    # Extract price per SKU as log\n",
    "    P_1 = np.log10(price_df.iloc[i, 0])\n",
    "    P_2 = np.log10(price_df.iloc[i, 1])\n",
    "    P_3 = np.log10(price_df.iloc[i, 2])\n",
    "    P_4 = np.log10(price_df.iloc[i, 3])\n",
    "    P_5 = np.log10(price_df.iloc[i, 4])\n",
    "    \n",
    "    # Placeholder\n",
    "    all_stats = []\n",
    "\n",
    "    # Begin Simulation Loop\n",
    "    for i in range(number_sims):\n",
    "        \n",
    "        ###########\n",
    "        #  SKU1   # \n",
    "        ###########\n",
    "        \n",
    "        intercept_1 = np.random.normal(intercept_mu_1, intercept_sigma_1)\n",
    "        B1_1   = np.random.normal(B1_mu_P1_1, B1_sigma_P1_1)\n",
    "        B2_1   = np.random.normal(B2_mu_P3_1, B2_sigma_P3_1)   \n",
    "        feat1  = np.random.randint(2)\n",
    "        disp1  = np.random.randint(2)\n",
    "        \n",
    "        sales_1 = np.exp(intercept_1 \\\n",
    "                + B1_1 * P_1 \\\n",
    "                + B2_1 * P_3 \\\n",
    "                + B3_mu_D1_1 * disp1 \\\n",
    "                + B4_mu_F1_1 * feat1)\n",
    "        revenue_1 = sales_1 * oz_1 * np.exp(P_1)\n",
    "        profits_1 = revenue_1 * grmar1_avg\n",
    "        \n",
    "        \n",
    "        ###########\n",
    "        #  SKU2   # \n",
    "        ###########\n",
    "        \n",
    "        intercept_2 = np.random.normal(intercept_mu_2, intercept_sigma_2)\n",
    "        B1_2   = np.random.normal(B1_mu_P1_2, B1_sigma_P1_2)\n",
    "        B2_2   = np.random.normal(B2_mu_P2_2, B2_sigma_P2_2)   \n",
    "        feat2  = np.random.randint(2)\n",
    "        disp2  = np.random.randint(2)\n",
    "        \n",
    "        sales_2 = np.exp(intercept_2 \\\n",
    "                + B1_2 * P_1 \\\n",
    "                + B2_2 * P_2 \\\n",
    "                + B3_mu_D2_2 * disp2 \\\n",
    "                + B4_mu_F2_2 * feat2)\n",
    "        \n",
    "        revenue_2 = sales_2 * oz_2 * np.exp(P_2)\n",
    "        profits_2 = revenue_2 * grmar2_avg\n",
    "        \n",
    "                \n",
    "        ###########\n",
    "        #  SKU3   # \n",
    "        ###########\n",
    "        \n",
    "        intercept_3 = np.random.normal(intercept_mu_3, intercept_sigma_3)\n",
    "        B1_3   = np.random.normal(B1_mu_P1_3, B1_sigma_P1_3)\n",
    "        B2_3   = np.random.normal(B2_mu_P3_3, B2_sigma_P3_3)   \n",
    "        B3_3   = np.random.normal(B3_mu_P4_3, B3_sigma_P4_3) \n",
    "        feat3  = np.random.randint(2)\n",
    "        disp3  = np.random.randint(2)\n",
    "        \n",
    "        sales_3 = np.exp(intercept_3 \\\n",
    "                + B1_3 * P_1 \\\n",
    "                + B2_3 * P_3 \\\n",
    "                + B3_3 * P_4 \\\n",
    "                + B4_mu_D3_3 * disp3 \\\n",
    "                + B5_mu_F3_3 * feat3)\n",
    "        \n",
    "        revenue_3 = sales_3 * oz_3 * np.exp(P_3)\n",
    "        profits_3 = revenue_3 * grmar3_avg\n",
    "        \n",
    "        \n",
    "        ###########\n",
    "        #  SKU4   # \n",
    "        ###########\n",
    "        \n",
    "        intercept_4 = np.random.normal(intercept_mu_4, intercept_sigma_4)\n",
    "        B1_4   = np.random.normal(B1_mu_P1_4, B1_sigma_P1_4)\n",
    "        B2_4   = np.random.normal(B2_mu_P3_4, B2_sigma_P3_4)   \n",
    "        B3_4   = np.random.normal(B3_mu_P4_4, B3_sigma_P4_5) \n",
    "        B4_4   = np.random.normal(B4_mu_P5_5, B4_sigma_P5_5)\n",
    "        feat4  = np.random.randint(2)\n",
    "        disp4  = np.random.randint(2)\n",
    "        \n",
    "        sales_4 = np.exp(intercept_4 \\\n",
    "                + B1_4 * P_1 \\\n",
    "                + B2_4 * P_3 \\\n",
    "                + B3_4 * P_4 \\\n",
    "                + B4_4 * P_5 \\\n",
    "                + B5_mu_D4_4 * disp4 \\\n",
    "                + B6_mu_F4_4 * feat4)\n",
    "        \n",
    "        revenue_4 = sales_4 * oz_4 * np.exp(P_4)\n",
    "        profits_4 = revenue_4 * grmar4_avg\n",
    "        \n",
    "        \n",
    "        ###########\n",
    "        #  SKU5   # \n",
    "        ###########\n",
    "        \n",
    "        intercept_5 = np.random.normal(intercept_mu_5, intercept_sigma_5)\n",
    "        B1_5   = np.random.normal(B1_mu_P2_5, B1_sigma_P2_5)\n",
    "        B2_5   = np.random.normal(B2_mu_P3_5, B2_sigma_P3_5)   \n",
    "        B3_5   = np.random.normal(B3_mu_P4_5, B3_sigma_P4_5) \n",
    "        B4_5   = np.random.normal(B4_mu_P5_5, B4_sigma_P5_5) \n",
    "        feat5  = np.random.randint(2)\n",
    "        disp5  = np.random.randint(2)\n",
    "        \n",
    "        sales_5 = np.exp(intercept_5 \\\n",
    "                + B1_5 * P_2 \\\n",
    "                + B2_5 * P_3 \\\n",
    "                + B3_5 * P_4 \\\n",
    "                + B4_5 * P_5 \\\n",
    "                + B5_mu_D5_5 * disp5 \\\n",
    "                + B6_mu_F5_5 * feat5)\n",
    "        \n",
    "        revenue_5 = sales_5 * oz_5 * np.exp(P_5)\n",
    "        profits_5 = revenue_5 * grmar5_avg\n",
    "        \n",
    "        \n",
    "        ####################\n",
    "        #  Appending SKUs  # \n",
    "        ####################\n",
    "        \n",
    "        \n",
    "        all_stats.append([sales_5, revenue_5, profits_5, disp5, feat5, \n",
    "                          sales_4, revenue_4, profits_4, disp4, feat4, \n",
    "                          sales_3, revenue_3, profits_3, disp3, feat3,\n",
    "                          sales_2, revenue_2, profits_2, disp2, feat2,\n",
    "                          sales_1, revenue_1, profits_1, disp1, feat1,])\n",
    "        \n",
    "           \n",
    "    results_df = pd.DataFrame.from_records(all_stats, columns =\n",
    "    ['units_sold_5','revenue_5','profits_5','disp_5','feat_5',\n",
    "     'units_sold_4','revenue_4','profits_4','disp_4','feat_4',\n",
    "     'units_sold_3','revenue_3','profits_3','disp_3','feat_3',\n",
    "     'units_sold_2','revenue_2','profits_2','disp_2','feat_2',\n",
    "     'units_sold_1','revenue_1','profits_1','disp_1','feat_1'])\n",
    "        \n",
    "    final_stats.append([np.exp(P_5), np.exp(P_4), np.exp(P_3),\n",
    "                        np.exp(P_2), np.exp(P_1),\n",
    "                        results_df['profits_5'].mean(),\n",
    "                        results_df['profits_4'].mean(),\n",
    "                        results_df['profits_3'].mean(),\n",
    "                        results_df['profits_2'].mean(),\n",
    "                        results_df['profits_1'].mean(),\n",
    "                        results_df['feat_5'].value_counts().idxmax(), # most frequent value\n",
    "                        results_df['feat_4'].value_counts().idxmax(),\n",
    "                        results_df['feat_3'].value_counts().idxmax(),\n",
    "                        results_df['feat_2'].value_counts().idxmax(),\n",
    "                        results_df['feat_1'].value_counts().idxmax(),\n",
    "                        results_df['disp_5'].value_counts().idxmax(),\n",
    "                        results_df['disp_4'].value_counts().idxmax(),\n",
    "                        results_df['disp_3'].value_counts().idxmax(),\n",
    "                        results_df['disp_2'].value_counts().idxmax(),\n",
    "                        results_df['disp_1'].value_counts().idxmax()])\n",
    "    \n",
    "final_stats_df = pd.DataFrame.from_records(final_stats, columns =\n",
    "                ['Price per Oz_5', 'Price per Oz_4',\n",
    "                 'Price per Oz_3', 'Price per Oz_2', 'Price per Oz_1',\n",
    "                 'Profits_5', 'Profits_4', \n",
    "                 'Profits_3', 'Profits_2', 'Profits_1',\n",
    "                 'Feat_5', 'Feat_4', 'Feat_3', 'Feat_2', 'Feat_1',\n",
    "                 'Disp_5', 'Disp_4', 'Disp_3', 'Disp_2', 'Disp_1'])\n",
    "\n",
    "final_stats_df['Total Profits'] = final_stats_df['Profits_5']\\\n",
    "                                + final_stats_df['Profits_4']\\\n",
    "                                + final_stats_df['Profits_3']\\\n",
    "                                + final_stats_df['Profits_2']\\\n",
    "                                + final_stats_df['Profits_1']\n",
    "\n",
    "\n",
    "final_stats_df\n",
    "\n",
    "# # Plot scatterplot\n",
    "# final_stats_df.plot.scatter(x = \"Price per Oz_5\", y = \"Profits_5\");\n",
    "# final_stats_df.plot.scatter(x = \"Price per Oz_5\", y = \"Total Profits\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-03-27T20:31:18.327209Z",
     "start_time": "2021-03-27T20:31:18.316985Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Price per Oz_5</th>\n",
       "      <th>Price per Oz_4</th>\n",
       "      <th>Price per Oz_3</th>\n",
       "      <th>Price per Oz_2</th>\n",
       "      <th>Price per Oz_1</th>\n",
       "      <th>Profits_5</th>\n",
       "      <th>Profits_4</th>\n",
       "      <th>Profits_3</th>\n",
       "      <th>Profits_2</th>\n",
       "      <th>Profits_1</th>\n",
       "      <th>Feat_5</th>\n",
       "      <th>Feat_4</th>\n",
       "      <th>Feat_3</th>\n",
       "      <th>Feat_2</th>\n",
       "      <th>Feat_1</th>\n",
       "      <th>Disp_5</th>\n",
       "      <th>Disp_4</th>\n",
       "      <th>Disp_3</th>\n",
       "      <th>Disp_2</th>\n",
       "      <th>Disp_1</th>\n",
       "      <th>Total Profits</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.164102</td>\n",
       "      <td>0.192644</td>\n",
       "      <td>0.237824</td>\n",
       "      <td>0.254708</td>\n",
       "      <td>0.212976</td>\n",
       "      <td>1086.808105</td>\n",
       "      <td>512219.923787</td>\n",
       "      <td>315.886571</td>\n",
       "      <td>484.153065</td>\n",
       "      <td>504.080334</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>514610.851863</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Price per Oz_5  Price per Oz_4  Price per Oz_3  Price per Oz_2  \\\n",
       "9        0.164102        0.192644        0.237824        0.254708   \n",
       "\n",
       "   Price per Oz_1    Profits_5      Profits_4   Profits_3   Profits_2  \\\n",
       "9        0.212976  1086.808105  512219.923787  315.886571  484.153065   \n",
       "\n",
       "    Profits_1  Feat_5  Feat_4  Feat_3  Feat_2  Feat_1  Disp_5  Disp_4  Disp_3  \\\n",
       "9  504.080334       1       1       1       1       1       1       0       0   \n",
       "\n",
       "   Disp_2  Disp_1  Total Profits  \n",
       "9       1       1  514610.851863  "
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Identify Best Pricing & Marketing Settings for Maximum Profit for SKU5\n",
    "index = final_stats_df.loc[final_stats_df['Total Profits'] == final_stats_df['Total Profits'].max(),:].index\n",
    "final_stats_df.iloc[index,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "plt.figure(figsize=(9, 5))\n",
    "\n",
    "sns.set_style('ticks')\n",
    "sns.set_context('talk', font_scale = 0.7)\n",
    "sns.set_palette('tab20c')\n",
    "\n",
    "ax = sns.scatterplot(x = 'VARIETY_OF_ORDERS',\n",
    "                     y = 'REVENUE',\n",
    "                     data  = chefs,\n",
    "                     alpha = 0.8);\n",
    "\n",
    "ax.set_ylabel('Revenue ($)')\n",
    "ax.set_xlabel('Variety of Orders (%)')\n",
    "ax.set_title('Negative Effect of Order Variety on Revenue', size = 14)\n",
    "\n",
    "\n",
    "xlabels = ['{:.0f}'.format(x) + \"%\" for x in ax.get_xticks()*100]\n",
    "ax.set_xticklabels(xlabels)\n",
    "ylabels = [\"$ \"+ '{:,.0f}'.format(x) for x in ax.get_yticks()]\n",
    "ax.set_yticklabels(ylabels)\n",
    "ax.axvline(x     = 0.1,\n",
    "           color = 'r',\n",
    "           ls  = '--')\n",
    "ax.axvline(x     = 0.2,\n",
    "           color = 'r',\n",
    "           ls  = '--')\n",
    "\n",
    "plt.savefig('./_images/scaterplot_revenue_and_order_variety.png')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "256px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
